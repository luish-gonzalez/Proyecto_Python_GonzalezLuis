from modules.storage import guardar_datos, mensaje

def registrar_nota_modulo(datos):
    print("\n=== Registrar Notas de M√≥dulo ===")
    ident = input("ID del camper: ")

    if ident not in datos["campers"]:
        mensaje("‚ö†Ô∏è Camper no encontrado.")
        return

    camper = datos["campers"][ident]

    if camper["estado"] != "Cursando":
        mensaje(f"‚ö†Ô∏è El camper {camper['nombres']} no est√° cursando actualmente.")
        return

    modulo = input("Nombre del m√≥dulo evaluado: ")

    try:
        nota_teoria = float(input("Nota te√≥rica (0-100): "))
        nota_practica = float(input("Nota pr√°ctica (0-100): "))
        nota_trabajos = float(input("Nota trabajos/quices (0-100): "))
    except ValueError:
        mensaje("‚ùå Ingrese valores num√©ricos v√°lidos.")
        return

    
    camper["notas"][modulo] = {
        "teoria": nota_teoria,
        "practica": nota_practica,
        "trabajos": nota_trabajos
    }

    guardar_datos(datos)
    mensaje(f"‚úÖ Notas del m√≥dulo '{modulo}' registradas para {camper['nombres']}.")

def calcular_nota_final_modulo(datos):
    print("\n=== Calcular Nota Final del M√≥dulo ===")
    ident = input("ID del camper: ")

    if ident not in datos["campers"]:
        mensaje("‚ö†Ô∏è Camper no encontrado.")
        return

    camper = datos["campers"][ident]
    if not camper["notas"]:
        mensaje("‚ö†Ô∏è No hay m√≥dulos registrados para este camper.")
        return

    print("\nM√≥dulos disponibles:")
    for mod in camper["notas"]:
        print(f"- {mod}")

    modulo = input("Ingrese el m√≥dulo para calcular nota final: ")
    if modulo not in camper["notas"]:
        mensaje("‚ö†Ô∏è M√≥dulo no encontrado.")
        return

    n = camper["notas"][modulo]
    nota_final = (n["teoria"] * 0.3) + (n["practica"] * 0.6) + (n["trabajos"] * 0.1)
    camper["notas"][modulo]["final"] = round(nota_final, 2)

    if nota_final >= 60:
        camper["notas"][modulo]["estado"] = "Aprobado"
    else:
        camper["notas"][modulo]["estado"] = "Reprobado"

    guardar_datos(datos)
    mensaje(f"üìä Nota final del m√≥dulo '{modulo}': {nota_final:.2f} ‚Üí {camper['notas'][modulo]['estado']}")

def marcar_riesgo(datos):
    print("\n=== Marcar Riesgo de Camper ===")
    ident = input("ID del camper: ")

    if ident not in datos["campers"]:
        mensaje("‚ö†Ô∏è Camper no encontrado.")
        return

    camper = datos["campers"][ident]

    if not camper["notas"]:
        mensaje("‚ö†Ô∏è Este camper no tiene m√≥dulos evaluados.")
        return

    
    notas_finales = []
    for modulo, info in camper["notas"].items():
        if "final" in info:
            notas_finales.append(info["final"])

    if not notas_finales:
        mensaje("‚ö†Ô∏è No hay notas finales calculadas para este camper.")
        return

    
    if any(n < 60 for n in notas_finales):
        camper["riesgo"] = "Alto"
    elif any(60 <= n < 70 for n in notas_finales):
        camper["riesgo"] = "Bajo"
    else:
        camper["riesgo"] = "Ninguno"

    guardar_datos(datos)
    mensaje(f"üìã Riesgo de {camper['nombres']} actualizado a: {camper['riesgo']}")

